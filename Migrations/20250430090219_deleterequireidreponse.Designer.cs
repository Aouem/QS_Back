// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QS.Models;

#nullable disable

namespace QS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250430090219_deleterequireidreponse")]
    partial class deleterequireidreponse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasAnnotation("Relational:JsonPropertyName", "categorie");
                });

            modelBuilder.Entity("FormResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RepondantId")
                        .HasColumnType("int");

                    b.Property<string>("Reponses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RepondantId");

                    b.ToTable("FormResultEntities");
                });

            modelBuilder.Entity("MedicalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("MedicalServices");

                    b.HasAnnotation("Relational:JsonPropertyName", "service");
                });

            modelBuilder.Entity("QS.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasAnnotation("Relational:JsonPropertyName", "question");
                });

            modelBuilder.Entity("QS.Models.Repondant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Repondants");

                    b.HasAnnotation("Relational:JsonPropertyName", "repondant");
                });

            modelBuilder.Entity("QS.Models.RepondantCategorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RepondantCategories");
                });

            modelBuilder.Entity("Reponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "boolean_value");

                    b.Property<int?>("NumericValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "numeric_value");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "question_id");

                    b.Property<int>("RepondantId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "repondant_id");

                    b.Property<string>("TextValue")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "text_value");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RepondantId");

                    b.ToTable("Reponses");
                });

            modelBuilder.Entity("FormResultEntity", b =>
                {
                    b.HasOne("QS.Models.Repondant", "Repondant")
                        .WithMany()
                        .HasForeignKey("RepondantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repondant");
                });

            modelBuilder.Entity("QS.Models.Repondant", b =>
                {
                    b.HasOne("Categorie", "Categorie")
                        .WithMany("Repondants")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MedicalService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Categorie");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Reponse", b =>
                {
                    b.HasOne("QS.Models.Question", "Question")
                        .WithMany("Reponses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QS.Models.Repondant", "Repondant")
                        .WithMany("Reponses")
                        .HasForeignKey("RepondantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Repondant");
                });

            modelBuilder.Entity("Categorie", b =>
                {
                    b.Navigation("Repondants");
                });

            modelBuilder.Entity("QS.Models.Question", b =>
                {
                    b.Navigation("Reponses");
                });

            modelBuilder.Entity("QS.Models.Repondant", b =>
                {
                    b.Navigation("Reponses");
                });
#pragma warning restore 612, 618
        }
    }
}
